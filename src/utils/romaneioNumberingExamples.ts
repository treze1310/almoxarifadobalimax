/**
 * Exemplos pr√°ticos da nova nomenclatura de romaneios
 * 
 * ESTRUTURA: AAA-AL-[CODIGO_CC]-SSSS
 * 
 * AAA = Tipo de documento (ROM para entrada/retirada, RDV para devolu√ß√£o)
 * AL = Almoxarifado/Suprimentos  
 * [CODIGO_CC] = C√≥digo EXISTENTE do centro de custo:
 *   - Para RETIRADAS/ENTRADAS: usa centro de custo DE DESTINO
 *   - Para DEVOLU√á√ïES: usa centro de custo DE ORIGEM
 * SSSS = N√∫mero sequencial do documento (4 d√≠gitos)
 * 
 * IMPORTANTE: Usa o c√≥digo J√Å CADASTRADO do centro de custo, n√£o gera um novo.
 */

export const EXEMPLOS_NUMERACAO = {
  /**
   * CEN√ÅRIO 1: Almoxarifado Central
   */
  ALMOXARIFADO_CENTRAL: {
    nome: 'Almoxarifado Central',
    codigoCentroCusto: 'ALM001', // C√≥digo cadastrado no sistema
    
    // Romaneios de entrada (fornecedor ‚Üí almoxarifado)
    primeiraEntrada: 'ROM-AL-ALM001-0001',
    segundaEntrada: 'ROM-AL-ALM001-0002',
    
    // Romaneios de devolu√ß√£o (setores ‚Üí almoxarifado)
    primeiraDevolucao: 'RDV-AL-ALM001-0001',
    segundaDevolucao: 'RDV-AL-ALM001-0002'
  },

  /**
   * CEN√ÅRIO 2: Setor de Produ√ß√£o
   */
  SETOR_PRODUCAO: {
    nome: 'Setor de Produ√ß√£o',
    codigoCentroCusto: 'PROD100', // C√≥digo cadastrado no sistema
    
    // Romaneios de retirada (almoxarifado ‚Üí produ√ß√£o)
    primeiraRetirada: 'ROM-AL-PROD100-0001',
    segundaRetirada: 'ROM-AL-PROD100-0002',
    terceiraRetirada: 'ROM-AL-PROD100-0003'
  },

  /**
   * CEN√ÅRIO 3: Exemplos por tipo de romaneio (regras espec√≠ficas)
   */
  TIPOS_ROMANEIO_REGRAS: {
    // Romaneio de ENTRADA: Material chegando no almoxarifado
    // CC Destino = Almoxarifado (onde o material vai ficar)
    entrada: {
      tipo: 'entrada',
      ccOrigem: 'Fornecedor (externo)',
      ccDestino: 'Almoxarifado Central (ALM001)',
      numero: 'ROM-AL-ALM001-0001', // Baseado no CC de DESTINO
      explicacao: 'Material entrando no almoxarifado central'
    },
    
    // Romaneio de RETIRADA: Material saindo do almoxarifado
    // CC Destino = Centro que vai receber o material
    retirada: {
      tipo: 'retirada',
      ccOrigem: 'Almoxarifado Central',
      ccDestino: 'Setor Produ√ß√£o (PROD100)',
      numero: 'ROM-AL-PROD100-0001', // Baseado no CC de DESTINO (Produ√ß√£o)
      explicacao: 'Material indo para o setor de produ√ß√£o'
    },
    
    // Romaneio de DEVOLU√á√ÉO: Material retornando para almoxarifado
    // CC Origem = De onde vem a devolu√ß√£o (usa este na nomenclatura)
    devolucao: {
      tipo: 'devolucao',
      ccOrigem: 'Setor Produ√ß√£o (PROD100)',
      ccDestino: 'Almoxarifado Central',
      numero: 'RDV-AL-PROD100-0001', // Baseado no CC de ORIGEM (Produ√ß√£o)
      explicacao: 'Material devolvido do setor de produ√ß√£o'
    }
  },

  /**
   * CEN√ÅRIO 4: M√∫ltiplos centros de custo
   */
  MULTIPLOS_CENTROS_CUSTO: {
    // Setor de Manuten√ß√£o
    manutencao: {
      nome: 'Setor de Manuten√ß√£o',
      codigo: 'MNT200',
      romaneios: [
        'ROM-AL-MNT200-0001', // Primeira retirada
        'ROM-AL-MNT200-0002', // Segunda retirada
        'RDV-AL-ALM001-0004'  // Devolu√ß√£o ao almoxarifado
      ]
    },
    
    // Setor de Qualidade
    qualidade: {
      nome: 'Setor de Qualidade',
      codigo: 'QLT300',
      romaneios: [
        'ROM-AL-QLT300-0001', // Primeira retirada
        'RDV-AL-ALM001-0005'  // Devolu√ß√£o ao almoxarifado
      ]
    }
  }
}

/**
 * Fun√ß√£o para validar se um n√∫mero segue o padr√£o correto
 */
export function validarNumeroRomaneio(numero: string): {
  valido: boolean
  detalhes?: {
    tipo: 'ROM' | 'RDV'
    codigoCentroCusto: string
    sequenciaDocumento: number
  }
  erro?: string
} {
  const pattern = /^(ROM|RDV)-AL-(.+)-(\d{4})$/
  const match = numero.match(pattern)
  
  if (!match) {
    return {
      valido: false,
      erro: 'Formato inv√°lido. Esperado: AAA-AL-[CODIGO_CC]-SSSS'
    }
  }

  const [, tipo, codigoCentroCusto, sequenciaDoc] = match

  // Valida√ß√µes adicionais
  const sequenciaDocNum = parseInt(sequenciaDoc, 10)

  if (!codigoCentroCusto || codigoCentroCusto.trim() === '') {
    return {
      valido: false,
      erro: 'C√≥digo do centro de custo n√£o pode estar vazio'
    }
  }

  if (sequenciaDocNum < 1) {
    return {
      valido: false,
      erro: 'Sequ√™ncia do documento deve ser maior que 0'
    }
  }

  return {
    valido: true,
    detalhes: {
      tipo: tipo as 'ROM' | 'RDV',
      codigoCentroCusto: codigoCentroCusto,
      sequenciaDocumento: sequenciaDocNum
    }
  }
}

/**
 * Exemplos de uso e testes
 */
export const TESTES_VALIDACAO = [
  // Casos v√°lidos
  { numero: 'ROM-AL-ALM001-0001', esperado: true },
  { numero: 'RDV-AL-PROD100-0025', esperado: true },
  { numero: 'ROM-AL-MNT200-9999', esperado: true },
  { numero: 'ROM-AL-123ABC-0001', esperado: true },
  { numero: 'RDV-AL-XYZ999-0001', esperado: true },
  
  // Casos inv√°lidos
  { numero: 'XXX-AL-ALM001-0001', esperado: false }, // Tipo inv√°lido
  { numero: 'ROM-XX-ALM001-0001', esperado: false }, // Departamento inv√°lido
  { numero: 'ROM-AL-ALM0010001', esperado: false },  // Formato incorreto (sem h√≠fen)
  { numero: 'ROM-AL--0001', esperado: false },       // CC vazio
  { numero: 'ROM-AL-ALM001-0000', esperado: false }, // Sequ√™ncia doc 0
  { numero: 'ROM-AL-ALM001-ABC1', esperado: false }, // Sequ√™ncia n√£o num√©rica
]

console.log('üß™ Executando testes de valida√ß√£o...')
TESTES_VALIDACAO.forEach(teste => {
  const resultado = validarNumeroRomaneio(teste.numero)
  const passou = resultado.valido === teste.esperado
  
  console.log(`${passou ? '‚úÖ' : '‚ùå'} ${teste.numero}: ${resultado.valido ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`)
  if (!resultado.valido && resultado.erro) {
    console.log(`   Erro: ${resultado.erro}`)
  }
})













