import { useEffect, useCallback } from 'react'
import { useAuth } from '@/contexts/AuthContext'
import { supabase } from '@/lib/supabase'

/**
 * üîÑ Hook para recupera√ß√£o autom√°tica de autentica√ß√£o
 * Monitora e restaura sess√µes perdidas durante opera√ß√µes longas
 */
export const useAuthRecovery = () => {
  const { user, session } = useAuth()

  // üîÑ For√ßar refresh da sess√£o se necess√°rio
  const refreshSession = useCallback(async (): Promise<boolean> => {
    try {
      console.log('üîÑ Attempting to refresh session...')
      
      const { data, error } = await supabase.auth.refreshSession()
      
      if (error) {
        console.error('‚ùå Session refresh failed:', error.message)
        return false
      }

      if (data.session) {
        console.log('‚úÖ Session refreshed successfully')
        return true
      }

      console.warn('‚ö†Ô∏è No session returned from refresh')
      return false
    } catch (error) {
      console.error('‚ùå Unexpected error during session refresh:', error)
      return false
    }
  }, [])

  // üîç Verificar se a sess√£o est√° v√°lida
  const isSessionValid = useCallback((): boolean => {
    if (!session) {
      console.warn('‚ö†Ô∏è No active session')
      return false
    }

    const now = Math.floor(Date.now() / 1000)
    const expiresAt = session.expires_at || 0

    if (now >= expiresAt) {
      console.warn('‚ö†Ô∏è Session expired')
      return false
    }

    const timeUntilExpiry = expiresAt - now
    if (timeUntilExpiry < 300) { // Menos de 5 minutos
      console.warn('‚ö†Ô∏è Session expires soon, should refresh')
      return false
    }

    return true
  }, [session])

  // üö® Recuperar sess√£o automaticamente se perdida
  const recoverSession = useCallback(async (): Promise<boolean> => {
    console.log('üö® Attempting session recovery...')

    // Verificar se ainda temos um usu√°rio mas sess√£o inv√°lida
    if (user && !isSessionValid()) {
      const recovered = await refreshSession()
      if (recovered) {
        console.log('‚úÖ Session recovered successfully')
        return true
      }
    }

    // Tentar recuperar sess√£o existente
    try {
      const { data, error } = await supabase.auth.getSession()
      
      if (error) {
        console.error('‚ùå Failed to get session:', error.message)
        return false
      }

      if (data.session) {
        console.log('‚úÖ Active session found')
        return true
      }

      console.warn('‚ö†Ô∏è No active session found')
      return false
    } catch (error) {
      console.error('‚ùå Session recovery failed:', error)
      return false
    }
  }, [user, isSessionValid, refreshSession])

  // üîÑ Auto-refresh preventivo da sess√£o
  useEffect(() => {
    if (!session) return

    const timeUntilExpiry = (session.expires_at || 0) - Math.floor(Date.now() / 1000)
    
    // Se expira em menos de 10 minutos, configurar refresh preventivo
    if (timeUntilExpiry > 0 && timeUntilExpiry < 600) {
      const refreshTime = Math.max(timeUntilExpiry - 300, 60) * 1000 // 5 min antes ou 1 min m√≠nimo

      console.log(`üîÑ Scheduling preventive session refresh in ${refreshTime/1000}s`)
      
      const timeoutId = setTimeout(() => {
        refreshSession()
      }, refreshTime)

      return () => clearTimeout(timeoutId)
    }
  }, [session, refreshSession])

  // üì° Monitorar eventos de rede para reautentica√ß√£o
  useEffect(() => {
    const handleOnline = () => {
      console.log('üåê Network restored, checking session...')
      recoverSession()
    }

    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        console.log('üëÅÔ∏è Tab became visible, checking session...')
        recoverSession()
      }
    }

    window.addEventListener('online', handleOnline)
    document.addEventListener('visibilitychange', handleVisibilityChange)

    return () => {
      window.removeEventListener('online', handleOnline)
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  }, [recoverSession])

  return {
    isSessionValid,
    refreshSession,
    recoverSession,
    hasValidSession: !!session && isSessionValid()
  }
}

export default useAuthRecovery
