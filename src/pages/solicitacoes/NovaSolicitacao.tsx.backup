import { useForm, useFieldArray } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { useNavigate, useLocation } from 'react-router-dom'
import { PlusCircle, Trash2, Loader2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from '@/components/ui/card'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { useToast } from '@/components/ui/use-toast'
import { Separator } from '@/components/ui/separator'
import {
  SolicitacaoCompra,
  DocumentTypeOptions,
  IssuingUnitOptions,
  PrazoEntregaOptions,
} from '@/types'
import { useEffect, useState } from 'react'
import { generateDocumentCode } from '@/lib/codeGenerator'
import { CentroCustoSelector } from '@/components/romaneios/CentroCustoSelector'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'

const requestSchema = z
  .object({
    documentType: z.enum(DocumentTypeOptions, {
      required_error: 'Tipo de documento é obrigatório.',
    }),
    issuingUnit: z.enum(IssuingUnitOptions, {
      required_error: 'Unidade emissora é obrigatória.',
    }),
    costCenterForCode: z.string().optional(),
    data: z.date({ required_error: 'A data é obrigatória.' }),
    empresa: z.string().min(1, 'Empresa é obrigatória.'),
    centroCustoOrigemId: z.string().min(1, 'Centro de Custo de Origem é obrigatório.'),
    centroCustoDestinoId: z.string().min(1, 'Centro de Custo de Destino é obrigatório.'),
    responsavel: z.string().min(1, 'Responsável é obrigatório.'),
    prazoEntrega: z.enum(PrazoEntregaOptions, {
      required_error: 'Prazo de entrega é obrigatório.',
    }),
    dataCustomizada: z.date().optional(),
    solicitante: z.string().min(1, 'Solicitante é obrigatório.'),
    itens: z
      .array(
        z.object({
          quantidade: z.coerce
            .number()
            .min(1, 'Quantidade deve ser maior que 0.'),
          unidade: z.string().min(1, 'Unidade é obrigatória.'),
          descricao: z.string().min(1, 'Descrição é obrigatória.'),
        }),
      )
      .min(1, 'Adicione pelo menos um item.'),
  })
  .refine(
    (data) => {
      if (data.issuingUnit === 'contract') {
        return (
          !!data.costCenterForCode && data.costCenterForCode.trim().length >= 4
        )
      }
      return true
    },
    {
      message:
        'Centro de Custo (últimos 4 dígitos) é obrigatório para "Contrato".',
      path: ['costCenterForCode'],
    },
  )
  .refine(
    (data) => {
      if (data.prazoEntrega === 'Customizada (especificar data)') {
        return !!data.dataCustomizada
      }
      return true
    },
    {
      message: 'Data customizada é obrigatória quando o prazo for "Customizada".',
      path: ['dataCustomizada'],
    },
  )

type RequestFormValues = z.infer<typeof requestSchema>

const NovaSolicitacaoPage = () => {
  const navigate = useNavigate()
  const { state } = useLocation()
  const solicitacaoToEdit: SolicitacaoCompra | null = state?.solicitacao || null
  const isEditMode = !!solicitacaoToEdit

  const [generatedCode, setGeneratedCode] = useState<string | null>(
    isEditMode ? solicitacaoToEdit.id : null,
  )
  const [isGeneratingCode, setIsGeneratingCode] = useState(false)

  const { toast } = useToast()
  const form = useForm<RequestFormValues>({
    resolver: zodResolver(requestSchema),
    defaultValues: isEditMode
      ? {
          ...solicitacaoToEdit,
          data: new Date(solicitacaoToEdit.data),
          dataCustomizada: solicitacaoToEdit.dataCustomizada ? new Date(solicitacaoToEdit.dataCustomizada) : undefined,
        }
      : {
          documentType: 'SCO',
          issuingUnit: 'matriz',
          costCenterForCode: '',
          data: new Date(),
          empresa: 'Empresa Matriz LTDA',
          centroCustoOrigemId: '',
          centroCustoDestinoId: '',
          responsavel: '',
          prazoEntrega: 'Normal (3-5 dias úteis)',
          solicitante: 'John Doe (Usuário Logado)',
          itens: [{ quantidade: 1, unidade: 'UN', descricao: '' }],
        },
  })

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'itens',
  })

  const { watch, getValues } = form
  const documentType = watch('documentType')
  const issuingUnit = watch('issuingUnit')
  const costCenterForCode = watch('costCenterForCode')
  const prazoEntrega = watch('prazoEntrega')

  useEffect(() => {
    const generate = async () => {
      const { documentType, issuingUnit, costCenterForCode } = getValues()
      if (documentType && issuingUnit) {
        if (
          issuingUnit === 'contract' &&
          (!costCenterForCode || costCenterForCode.trim().length < 4)
        ) {
          setGeneratedCode(null)
          return
        }
        setIsGeneratingCode(true)
        setGeneratedCode(null)
        try {
          const code = await generateDocumentCode(
            documentType,
            issuingUnit,
            costCenterForCode,
          )
          setGeneratedCode(code)
        } catch (error) {
          console.error('Failed to generate code', error)
          setGeneratedCode('Falha ao gerar código')
        } finally {
          setIsGeneratingCode(false)
        }
      }
    }
    generate()
  }, [documentType, issuingUnit, costCenterForCode, getValues])

  const onSubmit = async (data: RequestFormValues) => {
    if (!generatedCode || generatedCode.includes('Falha')) {
      toast({
        title: 'Erro na Geração do Código',
        description:
          'Não foi possível gerar o código do documento. Verifique os dados e tente novamente.',
        variant: 'destructive',
      })
      return
    }

    const requestData = {
      ...data,
      id: generatedCode,
      status: 'Pendente' as const,
    }
    console.log(requestData)
    toast({
      title: `Requisição ${isEditMode ? 'Atualizada' : 'Criada'}!`,
      description: `A requisição ${generatedCode} foi salva para aprovação.`,
    })

    if (isEditMode) {
      navigate('/solicitacoes')
    } else {
      navigate(`/solicitacoes/${requestData.id}/print`, { state: requestData })
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <h1 className="text-3xl font-bold">
          {isEditMode
            ? `Editar Requisição de Compra`
            : 'Nova Requisição de Compra'}
        </h1>
        <Card>
          <CardHeader>
            <div className="flex justify-between items-start">
              <div>
                <CardTitle>Requisição de Compra</CardTitle>
                <CardDescription>
                  {isEditMode
                    ? 'Altere os campos necessários e reenvie para aprovação.'
                    : 'Preencha os campos abaixo para criar uma nova requisição.'}
                </CardDescription>
              </div>
              <div className="text-right">
                <p className="font-semibold">Nº do Documento</p>
                <div className="text-muted-foreground h-6 flex items-center justify-end">
                  {isGeneratingCode ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <span className="font-mono">{generatedCode || '...'}</span>
                  )}
                </div>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            {isEditMode && solicitacaoToEdit.status === 'Rejeitada' && (
              <div className="p-4 bg-destructive/10 border border-destructive/20 rounded-lg">
                <h4 className="font-semibold text-destructive">
                  Motivo da Rejeição
                </h4>
                <p className="text-sm text-destructive/90">
                  {solicitacaoToEdit.rejectionReason}
                </p>
              </div>
            )}

            <Separator />
            <div>
              <h3 className="text-lg font-medium mb-4">
                Geração de Código do Documento
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="documentType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Tipo de Documento</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione o tipo" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {DocumentTypeOptions.map((type) => (
                            <SelectItem key={type} value={type}>
                              {type}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="issuingUnit"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel>Unidade Emissora</FormLabel>
                      <FormControl>
                        <RadioGroup
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          className="flex flex-col space-y-1"
                        >
                          <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value="matriz" />
                            </FormControl>
                            <FormLabel className="font-normal">
                              Matriz Barcarena-PA
                            </FormLabel>
                          </FormItem>
                          <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value="parauapebas" />
                            </FormControl>
                            <FormLabel className="font-normal">
                              Unidade Parauapebas-PA
                            </FormLabel>
                          </FormItem>
                          <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value="contract" />
                            </FormControl>
                            <FormLabel className="font-normal">
                              Contrato (usar Centro de Custo)
                            </FormLabel>
                          </FormItem>
                        </RadioGroup>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {watch('issuingUnit') === 'contract' && (
                  <FormField
                    control={form.control}
                    name="costCenterForCode"
                    render={({ field }) => (
                      <FormItem className="md:col-span-2">
                        <FormLabel>Centro de Custo para Código</FormLabel>
                        <FormControl>
                          <Input
                            placeholder="Insira o centro de custo"
                            {...field}
                          />
                        </FormControl>
                        <FormDescription>
                          Os últimos 4 dígitos serão usados no código do
                          documento.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                )}
              </div>
            </div>

            <Separator />
            <div>
              <h3 className="text-lg font-medium mb-4">
                Informações da Requisição
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <FormField
                  control={form.control}
                  name="data"
                  render={({ field }) => (
                    <FormItem className="flex flex-col pt-2">
                      <FormLabel>Data e Hora</FormLabel>
                      <FormControl>
                        <Input 
                          type="datetime-local" 
                          value={field.value ? new Date(field.value).toISOString().slice(0, 16) : ''}
                          onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : new Date())}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="empresa"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Empresa</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="responsavel"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nome do Responsável *</FormLabel>
                      <FormControl>
                        <Input 
                          {...field} 
                          placeholder="Digite o nome do responsável"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <FormField
                  control={form.control}
                  name="centroCustoOrigemId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Centro de Custo de Origem *</FormLabel>
                      <FormControl>
                        <CentroCustoSelector
                          value={field.value}
                          onChange={field.onChange}
                          placeholder="Selecione o centro de custo de origem"
                          label="Centro de Custo de Origem"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="centroCustoDestinoId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Centro de Custo de Destino *</FormLabel>
                      <FormControl>
                        <CentroCustoSelector
                          value={field.value}
                          onChange={field.onChange}
                          placeholder="Selecione o centro de custo de destino"
                          label="Centro de Custo de Destino"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <FormField
                  control={form.control}
                  name="prazoEntrega"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Prazo de Entrega *</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione o prazo de entrega" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {PrazoEntregaOptions.map((prazo) => (
                            <SelectItem key={prazo} value={prazo}>
                              {prazo}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {prazoEntrega === 'Customizada (especificar data)' && (
                  <FormField
                    control={form.control}
                    name="dataCustomizada"
                    render={({ field }) => (
                      <FormItem className="flex flex-col pt-2">
                        <FormLabel>Data Customizada *</FormLabel>
                        <FormControl>
                          <Input 
                            type="date" 
                            value={field.value ? new Date(field.value).toISOString().slice(0, 10) : ''}
                            onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                )}
              </div>

              <div className="mt-4">
                <FormField
                  control={form.control}
                  name="solicitante"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Solicitante</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
            <Separator />
            <div>
              <h3 className="text-lg font-medium mb-4">Itens Solicitados</h3>
              <div className="border rounded-md">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[80px]">Nº Item</TableHead>
                      <TableHead className="w-[150px]">Quantidade</TableHead>
                      <TableHead className="w-[150px]">Unidade</TableHead>
                      <TableHead>Descrição do Item</TableHead>
                      <TableHead className="w-[80px] text-right">
                        Ação
                      </TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {fields.map((item, index) => (
                      <TableRow key={item.id}>
                        <TableCell className="font-medium text-center">
                          {index + 1}
                        </TableCell>
                        <TableCell>
                          <FormField
                            control={form.control}
                            name={`itens.${index}.quantidade`}
                            render={({ field }) => (
                              <FormItem>
                                <FormControl>
                                  <Input type="number" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </TableCell>
                        <TableCell>
                          <FormField
                            control={form.control}
                            name={`itens.${index}.unidade`}
                            render={({ field }) => (
                              <FormItem>
                                <FormControl>
                                  <Input placeholder="Ex: UN, CX" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </TableCell>
                        <TableCell>
                          <FormField
                            control={form.control}
                            name={`itens.${index}.descricao`}
                            render={({ field }) => (
                              <FormItem>
                                <FormControl>
                                  <Input
                                    placeholder="Descrição detalhada do item"
                                    {...field}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => remove(index)}
                            disabled={fields.length <= 1}
                          >
                            <Trash2 className="h-4 w-4 text-destructive" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
              <Button
                type="button"
                variant="outline"
                size="sm"
                className="mt-4"
                onClick={() =>
                  append({ quantidade: 1, unidade: 'UN', descricao: '' })
                }
              >
                <PlusCircle className="mr-2 h-4 w-4" />
                Adicionar Item
              </Button>
              <FormField
                control={form.control}
                name="itens"
                render={() => <FormMessage className="mt-2" />}
              />
            </div>
            <Separator />
            <div>
              <h3 className="text-lg font-medium mb-4">Campos de Assinatura</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8 pt-8">
                <div className="flex flex-col items-center">
                  <div className="w-full border-t border-foreground pt-2 text-center">
                    <p className="font-semibold">Solicitante</p>
                    <p className="text-sm text-muted-foreground">
                      (nome e data)
                    </p>
                  </div>
                </div>
                <div className="flex flex-col items-center">
                  <div className="w-full border-t border-foreground pt-2 text-center">
                    <p className="font-semibold">Almoxarifado</p>
                    <p className="text-sm text-muted-foreground">
                      (nome e data)
                    </p>
                  </div>
                </div>
                <div className="flex flex-col items-center">
                  <div className="w-full border-t border-foreground pt-2 text-center">
                    <p className="font-semibold">Aprovação</p>
                    <p className="text-sm text-muted-foreground">
                      (nome e data)
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-end gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => navigate(-1)}
            >
              Cancelar
            </Button>
            <Button type="submit" disabled={isGeneratingCode || !generatedCode}>
              {isGeneratingCode ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : null}
              {isEditMode ? 'Reenviar para Aprovação' : 'Salvar Requisição'}
            </Button>
          </CardFooter>
        </Card>
      </form>
    </Form>
  )
}

export default NovaSolicitacaoPage
